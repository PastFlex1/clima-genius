// This file is generated by Gemini.
'use server';

/**
 * @fileOverview Provides clothing recommendations based on weather conditions.
 *
 * - clothingAdvisor - A function that recommends clothing based on weather.
 * - ClothingAdvisorInput - The input type for the clothingAdvisor function.
 * - ClothingAdvisorOutput - The return type for the clothingAdvisor function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ClothingAdvisorInputSchema = z.object({
  location: z.string().describe('The city for which to get clothing recommendations.'),
  temperature: z.number().describe('The current temperature in Celsius.'),
  humidity: z.number().describe('The current humidity (percentage).'),
  windSpeed: z.number().describe('The current wind speed in km/h.'),
  weatherDescription: z
    .string()
    .describe('A short description of the current weather conditions.'),
  forecast: z.string().describe('A short weather forecast for the day.'),
});
export type ClothingAdvisorInput = z.infer<typeof ClothingAdvisorInputSchema>;

const ClothingAdvisorOutputSchema = z.object({
  recommendation: z.string().describe('A detailed clothing recommendation for the day.'),
});
export type ClothingAdvisorOutput = z.infer<typeof ClothingAdvisorOutputSchema>;

export async function clothingAdvisor(input: ClothingAdvisorInput): Promise<ClothingAdvisorOutput> {
  return clothingAdvisorFlow(input);
}

const prompt = ai.definePrompt({
  name: 'clothingAdvisorPrompt',
  input: {schema: ClothingAdvisorInputSchema},
  output: {schema: ClothingAdvisorOutputSchema},
  prompt: `You are a personal stylist who gives clothing recommendations based on the weather.

  Current Weather in {{{location}}}:
  Temperature: {{{temperature}}}Â°C
  Humidity: {{{humidity}}}%
  Wind Speed: {{{windSpeed}}} km/h
  Description: {{{weatherDescription}}}

  Forecast: {{{forecast}}}

  Provide a detailed recommendation for what to wear today. Consider layers, potential precipitation, and temperature fluctuations throughout the day.`,
});

const clothingAdvisorFlow = ai.defineFlow(
  {
    name: 'clothingAdvisorFlow',
    inputSchema: ClothingAdvisorInputSchema,
    outputSchema: ClothingAdvisorOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

// This file is generated by Gemini.
'use server';

/**
 * @fileOverview Provides clothing recommendations based on weather conditions.
 *
 * - clothingAdvisor - A function that recommends clothing based on weather.
 * - ClothingAdvisorInput - The input type for the clothingAdvisor function.
 * - ClothingAdvisorOutput - The return type for the clothingAdvisor function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ClothingAdvisorInputSchema = z.object({
  location: z.string().describe('La ciudad para la que se obtendrán recomendaciones de ropa.'),
  temperature: z.number().describe('La temperatura actual en Celsius.'),
  humidity: z.number().describe('La humedad actual (porcentaje).'),
  windSpeed: z.number().describe('La velocidad actual del viento en km/h.'),
  weatherDescription: z
    .string()
    .describe('Una breve descripción de las condiciones meteorológicas actuales.'),
  forecast: z.string().describe('Un breve pronóstico del tiempo para el día.'),
});
export type ClothingAdvisorInput = z.infer<typeof ClothingAdvisorInputSchema>;

const ClothingAdvisorOutputSchema = z.object({
  recommendation: z.string().describe('Una recomendación detallada de ropa para el día.'),
});
export type ClothingAdvisorOutput = z.infer<typeof ClothingAdvisorOutputSchema>;

export async function clothingAdvisor(input: ClothingAdvisorInput): Promise<ClothingAdvisorOutput> {
  return clothingAdvisorFlow(input);
}

const prompt = ai.definePrompt({
  name: 'clothingAdvisorPrompt',
  input: {schema: ClothingAdvisorInputSchema},
  output: {schema: ClothingAdvisorOutputSchema},
  prompt: `Eres un estilista personal que da recomendaciones de ropa basadas en el clima. Tu respuesta debe estar en español.

  Clima actual en {{{location}}}:
  Temperatura: {{{temperature}}}°C
  Humedad: {{{humidity}}}%
  Velocidad del viento: {{{windSpeed}}} km/h
  Descripción: {{{weatherDescription}}}

  Pronóstico: {{{forecast}}}

  Proporciona una recomendación detallada sobre qué ropa usar hoy. Considera las capas de ropa, las posibles precipitaciones y las fluctuaciones de temperatura durante el día.`,
});

const clothingAdvisorFlow = ai.defineFlow(
  {
    name: 'clothingAdvisorFlow',
    inputSchema: ClothingAdvisorInputSchema,
    outputSchema: ClothingAdvisorOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
